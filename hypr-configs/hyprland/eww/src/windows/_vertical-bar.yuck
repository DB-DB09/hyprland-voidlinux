(defwidget VerticalBar []
  (box
    :orientation "h"
    :space-evenly false
    :vexpand true

    (revealer
      :transition "slideleft"
      :reveal revealControlpanel
      (control_widget))

    (centerbox
      :class "vbar"
      :orientation "v"

      (Top)
      (Middle)
      (Bottom)
      )))

(defwidget Top []
  (box
    :orientation "v"
    :space-evenly false
    :valign "start"

    (Logo)
    (Workspaces)
    (hiddenctl)
    ))

(defwidget Middle []
  (box
    :orientation "v"
    :space-evenly false
    :valign "center"
    :height 240

    (PlayerCtl)
    ))

(defwidget Bottom []
  (box
    :orientation "v"
    :space-evenly false
    :valign "end"

    ;; (systemtray)
    (Language)
    (sliders)
    (Clock)
    ;; (battery)
    ))

(defwidget systemtray []
  (box
    :class "widget"
    :space-evenly false
    :valign "end"
    :orientation "v"
    (eventbox
      :onclick "${EWW_CMD} update revealSystray=${!revealSystray}"
      (label :angle {!revealSystray ? 90 : 270} :class "revealtouch" :tooltip "reveal systray" :text ""))
    (revealer
      :reveal revealSystray
      :transition "slideup"
      (systray
        :icon_size 6
        :prepend-new true
        ))
    ))

(defwidget battery []
  (box
    :orientation "v"
    :space-evenly false
    :class "widget"
    (overlay
      (scale 
        :class "${EWW_BATTERY.BAT0.status == 'Charging' ? 'charging': bat0 < 16 ? 'dying': 'normal'} bat_scale"
        :value "${bat0}"
        :orientation "v"
        :max 100
        :min 0
        :active false
        :flipped true)
      (label 
        :class "lightning"
        :visible {EWW_BATTERY.BAT0.status == "Charging"}
        :text "󱐋"))
    (label :text "${EWW_BATTERY.BAT0.capacity}%" :limit-width 3 :show-truncated false)))

(defwidget hiddenctl []
  (eventbox 
    :cursor "pointer"
    :onclick {reveal3 ? "${EWW_CMD} update reveal3=false" : "${EWW_CMD} update reveal3=true"}
    (box
      :orientation "v"
      :class "widget"
      :space-evenly false
      (revealer
        :reveal reveal3
        :transition "slideup"
        :duration "500ms"
        (box
          :class "touch"
          :orientation "v"
          :spacing 5
          (button :onclick "swaymsg kill" 
            (label :class "icon" :text "󰅙"))
          (button :onclick "wofi --show=drun -i -I"
            (label :class "icon" :text "󰀻"))
          (button :onclick "./scripts/touchkey.sh" 
            (label :class "icon" :text "󰌌"))))
      (label :angle {reveal3 ? 90 : 270} :class "revealtouch" :tooltip "touch control" :text "")
      (revealer
        :reveal {!reveal3}
        :transition "slidedown"
        ))))

(defwidget sliders []
  (box
    :class "widget"
    :orientation "v"
    :space-evenly false
    :spacing 5
    :valign "end"

    (button :onclick "alacritty -e nmtui" :tooltip wifi_essid 
      (label :class "icon" :style "font-size: 18px;" :text wifi_icon))

    (RevealOnHover
      :var revealVolume
      :varname "revealVolume"
      (box
        :orientation "v"
        :space-evenly false
        :class "sound"
        (label :class "icon" :text {volumemute == 'false' ? "󰕾" : "󰖁"}))
      (scale
        :class "volslide"
        :value volume
        :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%"
        :orientation "v"
        :tooltip "${volume}%"
        :max 101
        :min 0
        :flipped true))

    (RevealOnHover
      :var revealMicrophone
      :varname "revealMicrophone"
      (box
        :orientation "v"
        :space-evenly false
        :class "sound"
        (label :class "icon" :text {volumemute == 'false' ? "" : "󰖁"}))
      (scale 
        :class "volslide"
        :value mic_volume
        :onchange "pactl set-source-volume @DEFAULT_SOURCE@ {}%"
        :orientation "v"
        :tooltip "${mic_volume}%"
        :max 101
        :min 0
        :flipped true))

    (RevealOnHover
      :var revealBrightness
      :varname "revealBrightness"
      (box 
        :orientation "v"
        :space-evenly false
        :class "bright"
        (label :class "icon" :text "󰃞"))
      (scale 
        :class "brislide"
        :onchange "brightnessctl set {}%"
        :value brightness
        :orientation "v"
        :tooltip "${brightness}%"
        :max 100
        :min 0
        :flipped true))
    ))