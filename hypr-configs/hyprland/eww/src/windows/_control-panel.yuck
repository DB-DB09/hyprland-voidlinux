(defwidget ControlPanel []
  (box
    :class "control-panel"
    :space-evenly false
    :orientation "v"
    :valign "fill"
    :vexpand true
    
    (User )
    (chooser)
    ; (weather)
    
    ; (MediaPlayer :h 160 :permashow true)
    
    (box
      :orientation "h"
      :space-evenly false
      :height 180
      
      (Timer)
      (BigSliders))
    
    (box
      :space-evenly false
      :orientation "v"
      :vexpand true
      :visible true
      
      (Toolbox)
      (NotificationsWeatherBox))
  ))

(defwidget Toolbox []
  (eventbox
    :cursor "pointer"
    
    (box
      :class "tricontrol panel-widget"
      :orientation "h"
      
      (button :onclick "./scripts/pop colourpick" (label :text "󰈊"))
      (button :onclick "./scripts/pop scrop" (label :text "󰆞"))
      (button :onclick "~/.config/eww/themeswitch/scripts/pop" (label :text "")))))

(defwidget chooser []
  (box
    :orientation "v"
    :height 60
    :class "panel-widget"
    :space-evenly false
    
    (box
      :orientation "h"
      
      (button
        :onclick "${EWW_CMD} update reveal4=${!reveal4} reveal5=false reveal6=false"
        :onrightclick "foot nvim ~/Documents/fuck.txt"
        (label :class {reveal4 ? "titlesel" : "title"} :text "Notes"))
      (button
        :onclick "${EWW_CMD} update reveal5=${!reveal5} reveal4=false reveal6=false"
        (label :class {reveal5 ? "titlesel" : "title"} :text "System"))
      (button
        :onclick "${EWW_CMD} update reveal6=${!reveal6} reveal5=false reveal4=false"
        (label :class {reveal6 ? "titlesel" : "title"} :text "Hyprland")))
    
    (notes)
    (sysinfo)
    (wmctrl)))


(defwidget notes []
  (revealer
    :reveal reveal4
    :transition "slideup"
    (box
      :height 140
      (box
        :orientation "h"
        (scroll
          :hscroll true
          :vscroll true
          (label :text notesc))))))

(defwidget wmctrl []
  (revealer
    :reveal reveal6
    :transition "slideup"
    (scroll
      :hscroll false
      :vscroll true
      :height 140
      (box
        :orientation "v"
        :valign "fill"
        :space-evenly false
        :spacing 5
        (wmslider
          :name "gaps outer"
          :val gapsouter
          :onchange "swaymsg gaps outer all set {}"
          :max 300
        :reset "${EWW_CMD} update gapsouter=0 && swaymsg gaps outer all set 0")
        (wmslider
          :name "gaps inner"
          :val gapsinner
          :onchange "swaymsg gaps inner all set {}"
          :max 150
        :reset "${EWW_CMD} update gapsinner=15 && swaymsg gaps inner all set 15")
        (wmslider
          :name "border size"
          :val borderpixel
          :onchange "swaymsg default_border pixel {} && swaymsg '[app_id=\".*\"] border pixel {}'"
          :max 50
        :reset "${EWW_CMD} update borderpixel=2 && swaymsg default_border pixel 2 && swaymsg '[app_id=\".*\"] border pixel 2'")
        (box
          :orientation "h"
          :space-evenly false
          :halign "center"
          :spacing 10
          (label :text "natural scrolling")
          (checkbox
            :onchecked "swaymsg input \"type:touchpad\" natural_scroll enable"
          :onunchecked "swaymsg input \"type:touchpad\" natural_scroll disable"))
        (box
          :orientation "h"
          :space-evenly false
          :halign "center"
          :spacing 10
          (label :text "disable when typing")
          (checkbox
            :onchecked "swaymsg input \"type:touchpad\" dwt enable"
            :onunchecked "swaymsg input \"type:touchpad\" dwt disable"
          ))
        
        (box
          :orientation "h"
          :space-evenly false
          :halign "center"
          :spacing 10
          (label :text "caffeine")
          (checkbox
            :onchecked "swaymsg [app_id='.*'] inhibit_idle open && ${EWW_CMD} update caffeine=true"
            :onunchecked "swaymsg [app_id='.*'] inhibit_idle none && ${EWW_CMD} update caffeine=false"
          ))
      ))))

(defwidget sysinfo []
  (revealer
    :reveal reveal5
    :transition "slideup"
    (box
      :orientation "h"
      :height 140
      (systat :icon "󰻠" :val { EWW_CPU.avg })
      (systat :icon "󰍛" :val { EWW_RAM.used_mem_perc })
      (systat :icon "󰈐" :val { gpu })
      (systat :icon "" :val { EWW_BATTERY.BAT0.capacity })
    )))

(defwidget wmslider [name val onchange max reset]
  (box
    :orientation "h"
    :space-evenly false
    :halign "center"
    :width 20
    :vexpand false
    :valign "center"
    :spacing 10
    (label
    :text name)
    (scale
      :min 0
      :max max
      :class "wmctrlslide"
      :tooltip val
      :value val
    :onchange onchange)
    (button
      :onclick reset
      :style "padding: 0px 8px 0px 3px;"
    "")))

(defwidget systat [icon val]
  (overlay
    (circular-progress
      :halign "center"
      :valign "center"
      :class "circsys"
      :thickness 40
    :value val)
    
    (box
      :class "circiconcontain"
      :halign "center"
      :valign "center"
      :height 55
      :width 55
      (label :text icon))))

(defwidget User []
  (revealer
    :reveal {!reveal4 && !reveal5 && !reveal6}
    :transition "slideup"
    (box
      :orientation "h"
      :space-evenly false
      :height 140
      :width 320
      :class "panel-widget"
      :valign "start"
      :halign "fill"
      :hexpand true
      (image :style "margin: 10px;" :image-width 80 :image-height 80 :path "./assets/image/fieshidle.gif")
      (scroll
        :hscroll true
        :vscroll false
        :hexpand true
        (box
          :orientation "v"
          :class "userinfo"
          :space-evenly false
          :valign "center"
          :halign "center"
          (label :halign "start" :text "${datehour < 12 ? 'Good morning' : datehour < 18 ? 'Good afternoon' : datehour < 22 ? 'Good evening' : 'Good night'} ${hostname}")
          (label :halign "start" :text uptime :style "font-size: 12px;"))))))

(defwidget NotificationsWeatherBox []
  (box
    :orientation "v"
    :halign "fill"
    :valign "fill"
    :vexpand true
    :class "panel-widget"
    :space-evenly false
    
    (box
      :orientation "h"
      (button
        :onclick "${EWW_CMD} update revealWeather=false"
        (label :class {!revealWeather ? "titlesel" : "title"} :text "Notifications"))
      (button
        :onclick "${EWW_CMD} update revealWeather=true"
        (label :class {revealWeather ? "titlesel" : "title"} :text "Weather")))
    
    (box
      :orientation "h"
      :vexpand true
      :hexpand true
      :space-evenly false
      
      (revealer
        :reveal {!revealWeather}
        :hexpand {!revealWeather}
        :transition "slideleft"
        
        (NotificationsLogs))
      
      (revealer
        :reveal revealWeather
        :hexpand revealWeather
        :transition "slideleft"
        
        (Weather)))))

(defwidget Weather []
  (overlay
    (box
      :orientation "v"
      :halign "fill"
      :valign "fill"
      :vexpand true
      :space-evenly false
      
      (weathermain)
      
      (scroll
        :hscroll false
        :vscroll true
        :vexpand true
        (box
          :orientation "v"
          :valign "start"
          :space-evenly false
          (for hour in {weatherjson.hourly}
            (weatherhour :hour hour)))))
    (box
      :valign "end"
      :hexpand true
      :vexpand false
      :height 80
    :class "fadeoutbox")
  ))

(defwidget NotificationsLogs []
  (box
    :halign "fill"
    :valign "fill"
    :vexpand true
    :space-evenly false
    :orientation "v"
    
    (overlay
      :vexpand true
      
      (box
        :halign "fill"
        :valign "fill"
        :vexpand true
        :space-evenly false
        :orientation "v"
        
        (scroll
          :hscroll false
          :vscroll true
          :vexpand true
          :valign "fill"
          
          (box
            :orientation "v"
            :valign "start"
            :space-evenly false
            (for notif in {notifications.notifications}
              (SingleNotification :noti notif :initial false))))
      )
      
      (box
        :valign "end"
        :hexpand true
        :vexpand false
        :height 80
      :class "fadeoutbox")
    )
    
    (box
      :orientation "h"
      :valign "end"
      
      (button
        :onclick "./scripts/notification/manage --clear"
        (label
          :class "title"
        :text "Clear All"))
      (button
        :onclick "./scripts/notification/manage --toggle"
        (label
          :class { notifications.dnd ? "titlesel" : "title"}
        :text "Do Not Disturb")))
  )
)

(defwidget weatherhour [hour]
  (box
    :class "smallentry"
    :orientation "h"
    :height 80
    :halign "fill"
    :valign "center"
    :vexpand false
    :space-evenly true
    :spacing 10
    (label :style "font-size: 20px;" :text {hour.time})
    (image
      :image-width 50
      :image-height 50
    :path "./assets/image/weather/${hour.icon}.svg")
    (box
      :orientation "v"
      :space-evenly false
      :valign "center"
      :spacing 10
      (label :halign "start" :text "${hour.FeelsLikeC}°C")
      (label :halign "start" :text "rain: ${hour.chanceofrain}%"))))

(defwidget weathermain []
  (box
    :class "mainentry"
    :orientation "h"
    :halign "fill"
    :height 150
    :space-evenly false
    :spacing 10
    (image
      :image-width 100
      :image-height 100
      :style "margin: 10px;"
    :path "./assets/image/weather/${weatherjson.icon}.svg")
    (scroll
      :hscroll true
      :vscroll false
      :valign "fill"
      :hexpand true
      (box
        :orientation "v"
        (label :halign "start" :text {weatherjson.weatherDesc[0].value})
        (label :halign "start" :text "Feels like ${weatherjson.FeelsLikeC}°C")
        (label :halign "start" :text "← ${weatherjson.windspeedKmph} km/h")
        ;; (label :halign "start" :text "${weatherjson.visibility} km")
        ;; (label :halign "start" :text "${weatherjson.precipMM} mm")
      ))))

(defwidget Timer []
  (box
    :orientation "v"
    :class "panel-widget"
    :space-evenly false
    :width 200
    
    (label :class "timer" :valign "center" :vexpand true :text timerdis)
    (box
      :orientation "h"
      :class "timer_butt"
      :valign "end"
      (button :onclick "./scripts/python/timer.py timedec" (label :text "-"))
      (button :onclick "./scripts/python/timer.py toggle" (label :style "padding-right: 3px;" :text { !matches(timerdis, ":") ? "󱎫" : "󱫎"}))
      (button :onclick "./scripts/python/timer.py timeinc" (label :text "+")))))

(defwidget BigSliders []
  (box
    :valign "fill"
    :halign "fill"
    :class "panel-widget"
    :hexpand true
    :space-evenly true
    
    (BigBarSlider :var {volume} :icon {volumemute == 'false' ? "󰕾" : "󰖁"}
    :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%")
    
    (BigBarSlider :var {mic_volume} :icon {volumemute == 'false' ? "" : "󰖁"}
    :onchange "pactl set-source-volume @DEFAULT_SOURCE@ {}%")
    
    (BigBarSlider :var {brightness} :icon "󰃞"
    :onchange "brightnessctl set {}%")
    
  ))

(defwidget quote []
  (box
    :class "quotewid panel-widget"
    :halign "fill"
    :valign "fill"
    :vexpand true
    :space-evenly false
    :orientation "v"
    (scroll :vexpand true :hscroll true :vscroll true
      (label
        :class "quote"
        :text {quotejson.content}
        :wrap true
      :width 300))
    (label
      :class "quoteauthor"
    :text "- ${quotejson.author}")))